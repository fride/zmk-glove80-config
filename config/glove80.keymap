/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */


//
// Glove80 key positions index for positional hold-tap
// - https://discord.com/channels/877392805654306816/937645688244826154/1066713913351221248
// - https://media.discordapp.net/attachments/937645688244826154/1066713913133121556/image.png
//
// |------------------------|------------------------|
// | LEFT_HAND_KEYS         |        RIGHT_HAND_KEYS |
// |                        |                        |
// |  0  1  2  3  4         |          5  6  7  8  9 |
// | 10 11 12 13 14 15      |      16 17 18 19 20 21 |
// | 22 23 24 25 26 27      |      28 29 30 31 32 33 |
// | 34 35 36 37 38 39      |      40 41 42 43 44 45 |
// | 46 47 48 49 50 51      |      58 59 60 61 62 63 |
// | 64 65 66 67 68         |         75 76 77 78 79 |
// |                69 52   |   57 74                |
// |                 70 53  |  56 73                 |
// |                  71 54 | 55 72                  |
// |------------------------|------------------------|
//
#define LEFT_HAND_KEYS    0  1  2  3  4 10 11 12 13 14 15 22 23 24 25 26 27 34 35 36 37 38 39 46 47 48 49 50 51 64 65 66 67 68
#define RIGHT_HAND_KEYS   5  6  7  8  9 16 17 18 19 20 21 28 29 30 31 32 33 40 41 42 43 44 45 58 59 60 61 62 63 75 76 77 78 79
// Right hands but NOT the magic key! ;)
#define RIGHT_HAND_KEYS_M 5  6  7  8  9 16 17 18 19 20 21 28 30 31 32 33 40 41 42 43 44 45 58 59 60 61 62 63 75 76 77 78 79
#define THUMB_KEYS 69 52 57 74 70 53 56 73 71 54   55 72

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>
#include <behaviors/num_word.dtsi>
#define my_tapping_term 380
#define my_quick_tapping_term 112
#define umlaut_tapping_term 150
#define my_ak_delay 40

&sl {  // sticky-layer config
    ignore-modifiers;          // allow chording sticky mods & layers
};

// layers
#define DEFAULT     0
#define HANDS_DOWN  1
#define NAVI        2
#define SYMBOLS     3
#define NUMBERS     4
#define MAGIC       5

// modifiers
#define HYPER LC(LS(LG(LALT)))
#define MEH LS(LC(LALT))

// special chars
#define U_UML &lk_U_umlaut 0 U
#define A_UML &lk_A_umlaut 0 A
#define O_UML &lk_O_umlaut 0 O

// special keys
// I will never like this dsl! Why do I have to pass arguments where no arguments are used!?
#define Arrows arrows 0 0

// less thumbs
#define NAV_SPCAE &lt NAVI SPACE
#define NAV_R     &lt NAVI R
#define NUM_SPC   &lt NUMBERS SPACE
// this seems to not work as advertised!?
#define TH_UML    &th_uml UMLAUTS
#define NUM_SFT     &lst NUMBERS LSFT

#define SYM_L &sl SYMBOLS
#define NAV_L &sl NAVI


/ {

    #include "combos.dtsi"

    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <SYMBOLS NAVI>;
            then-layer = <NUMBERS>;
        };
    };
    behaviors {

        app_swap: app_swapper {
            compatible = "zmk,behavior-tri-state";
            label = "app_swapper";
            #binding-cells = <0>;
            bindings = <&kt LGUI>, <&kp TAB>, <&kt LGUI>;
            ignored-key-positions = <30 41 42 43>;
        };
        win_swap: win_swapper {
            compatible = "zmk,behavior-tri-state";
            label = "win_swapper";
            #binding-cells = <0>;
            bindings = <&kt LGUI>, <&kp GRAVE>, <&kt LGUI>;
            ignored-key-positions = <>;
        };

        lst: layer_sticky_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_STICKY_TAP";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&mo>, <&sk>;
        };

        // See https://github.com/dhruvinsh/zmk-num-word
        num_word: num_word {
            #binding-cells = <0>;
            compatible = "zmk,behavior-num-word";
            continue-list = <BSPC DEL DOT COMMA PLUS MINUS STAR FSLH EQUAL>;
            layers = <NUMBERS>;
            ignore-numbers;
        };

        // ********************** CUSTOM HOLD TAPS ********************** //
        // source: https://github.com/rafaelromao/keyboards/blob/main/src/zmk/features/thumbs.dtsi
        msl: layer-tap-with-stick-layer {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <my_quick_tapping_term>;
            flavor = "tap-preferred";
            quick-tap-ms = <0>;
            bindings = <&mo>, <&sl>;
        };
        msk: layer-tap-with-stick-key {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <my_quick_tapping_term>;
            flavor = "tap-preferred";
            quick-tap-ms = <0>;
            bindings = <&mo>, <&sk>;
        };
        mst: layer-tap-with-tog-key {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <my_quick_tapping_term>;
            flavor = "tap-preferred";
            quick-tap-ms = <0>;
            bindings = <&mo>, <&tog>;
        };

         lk_U_umlaut: lk_U_umlaut { // ¨, ü on "linger"
            compatible = "zmk,behavior-hold-tap";
            label = "lk_U_umlaut";
            #binding-cells = <2>;
            tapping-term-ms = <umlaut_tapping_term>;
            flavor = "tap-preferred";
            bindings = <&typeUumlaut>, <&kp>;
        };
         lk_A_umlaut: lk_A_umlaut { // ¨, ü on "linger"
            compatible = "zmk,behavior-hold-tap";
            label = "lk_A_umlaut";
            #binding-cells = <2>;
            tapping-term-ms = <umlaut_tapping_term>;
            flavor = "tap-preferred";
            bindings = <&typeAumlaut>, <&kp>;
        };
         lk_O_umlaut: lk_O_umlaut { // ¨, ü on "linger"
            compatible = "zmk,behavior-hold-tap";
            label = "lk_O_umlaut";
            #binding-cells = <2>;
            tapping-term-ms = <umlaut_tapping_term>;
            flavor = "tap-preferred";
            bindings = <&typeOumlaut>, <&kp>;
        };



        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to
        // layer_td: tap_dance_0 {
        //     compatible = "zmk,behavior-tap-dance";
        //     #binding-cells = <0>;
        //     tapping-term-ms = <200>;
        //     bindings = <&mo LOWER>, <&to LOWER>;
        // };


        // Home Row Mods
        hmr: homerow_mods_right { // use on right hand to mod left
            compatible = "zmk,behavior-hold-tap";
            label = "homerow_mods_right";
            #binding-cells = <2>;
            tapping-term-ms = <my_tapping_term>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>; // left hand allowed
        };

        hml: homerow_mods_left { // use on left hand to mod right
            compatible = "zmk,behavior-hold-tap";
            label = "homerow_mods_left";
            #binding-cells = <2>;
            tapping-term-ms = <my_tapping_term>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>; // right hand allowed but  not magic!
        };

        skq: sticky_key_quick_release {
            compatible = "zmk,behavior-sticky-key";
            #binding-cells = <1>;
            bindings = <&kp>;
            release-after-ms = <1000>;
            quick-release;
            ignore-modifiers;
        };
        ad_a: adaptive_a {
            compatible = "zmk,behavior-antecedent-morph";
            label = "ADAPTIVE_A";
            #binding-cells = <0>;
			defaults = <&kp A>;
            bindings = <&kp U>, <&kp O>;
			antecedents = <Q Z>;
			max-delay-ms = <250>;
        };
        ad_dot: adaptive_dot {
            compatible = "zmk,behavior-antecedent-morph";
            label = "ADAPTIVE_DOT";
            #binding-cells = <0>;
			defaults = <&kp DOT>;
            bindings = <&kp I>;
			antecedents = <E>;
			max-delay-ms = <250>;
        };

        arrows: arrows {
            compatible = "zmk,behavior-hold-tap";
            label = "ARROWS";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <120>;
            quick-tap-ms = <120>;
            global-quick-tap;
            bindings = <&FatArrow>, <&Arrow>;
        };


        ad_n: adaptive_n {
            compatible = "zmk,behavior-antecedent-morph";
            label = "ADAPTIVE_N";
            #binding-cells = <0>;
			defaults = <&kp N>;
            bindings = <&kp H>, <&kp H>;
            antecedents = <T C>;
            max-delay-ms = <250>;
        };
        magic_th: the_magic_th_key {
            compatible = "zmk,behavior-antecedent-morph";
            label = "THE_MAGIC_TH_KEY";
            #binding-cells = <0>;
			defaults = <&th>;
            bindings = <&ch>;
            antecedents = <S>;
            max-delay-ms = <250>;
        };

        // see https://github.com/Ikcelaks/keyboard_layouts/blob/main/magic_sturdy/magic_sturdy.md
        // Prev 	A 	B 	C 	D 	E 	F 	G 	H 	I 	J 	K 	L 	M 	N 	O 	P
        // Magic 	O 	EFORE 	Y 	Y 	U 	-- 	Y 	-- 	ON 	UST 	S 	k 	ENT 	ION 	A 	Y
        // Prev 	Q 	R 	S 	T 	U 	V 	W 	X 	Y 	Z 	, 	. 	/ 	- 	= 	wspc
        // Magic 	-- 	L 	K 	MENT 	E 	ER 	HICH 	ES 	P 	-- 	⎵BUT 	\ 	-- 	> 	>
        magic: the_magic_key {
            compatible = "zmk,behavior-antecedent-morph";
            label = "THE_MAGIC_KEY";
            #binding-cells = <0>;
			defaults = <&kp N>;
            bindings = <&kp O>
                     , <&kp B>
                     , <&kp Y>
                     , <&kp Y>
                     , <&kp U>
                     , <&kp Y>
                     , <&magic_on>
                     , <&magic_ust>
                     , <&kp S>
                     , <&kp L>
                     , <&kp M>
                     , <&kp T>
                     , <&kp A>
                     , <&kp Y>
                     , <&kp L>
                     , <&kp K>
                     , <&kp E>
                     , <&magic_er>
                     , <&kp P>
                     , <&kp GT>
                     , <&kp GT>
                     , <&kp SLASH>
                     , <&kp GT>;
			antecedents = <A E C D E G I J J K L M O P R S U V Y MINUS EQUAL DOT STAR>;
			max-delay-ms = <250>;
        };
    };

    macros {

        ZMK_MACRO(typeUumlaut,
            wait-ms = <10>;
            tap-ms =  <10>;
            bindings = <&kp LA(U)>;
        )
        ZMK_MACRO(typeAumlaut,
            wait-ms = <10>;
            tap-ms =  <10>;
            bindings = <&kp LA(A)>;
        )
        ZMK_MACRO(typeOumlaut,
            wait-ms = <10>;
            tap-ms =  <10>;
            bindings = <&kp LA(O)>;
        )
        ZMK_MACRO(typeSZ,
            wait-ms = <10>;
            tap-ms =  <10>;
            bindings = <&kp LA(S)>;
        )

        ZMK_MACRO(th,
            wait-ms = <10>;
            tap-ms =  <10>;
            bindings = <&kp T>
                    //  , <&macro_release &kp LSHFT>
                    //  , <&macro_release &kp RSHFT>
                     , <&kp H>;
        )
        ZMK_MACRO(ch,
            wait-ms = <0>;
            tap-ms = <40>;
            bindings = <&macro_tap &kp C>
                , <&macro_release &kp LSHFT>
                , <&macro_release &kp RSHFT>
                , <&macro_tap &kp H>
                ;
        )

        ZMK_MACRO(magic_on,
            wait-ms = <10>;
            tap-ms = <10>;
            bindings = <&kp O>
                    , <&kp N>;
        )
        ZMK_MACRO(magic_ust,
            wait-ms = <10>;
            tap-ms = <10>;
            bindings = <&kp U>
                    , <&kp S>
                    , <&kp T>;
        )
        ZMK_MACRO(magic_er,
            wait-ms = <10>;
            tap-ms = <10>;
            bindings = <&kp E>
                    , <&kp R>;
        )

        ZMK_MACRO(FatArrow,
            wait-ms  = <10>;
            tap-ms   = <10>;
            bindings = <&kp EQUAL>
                    , <&kp GT>;
        )

        ZMK_MACRO(Arrow,
            wait-ms = <10>;
            tap-ms = <10>;
            bindings = <&kp MINUS>
                    , <&kp GT>;
        )
        bt_0: bt_profile_macro_0 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };

        ZMK_MACRO(AppSwitch,
            wait-ms = <50>;
            tap-ms = <20>;
            bindings  = <&macro_press &kp LGUI>
                      , <&macro_tap &kp TAB>
                      , <&macro_pause_for_release>
                      , <&macro_release &kp LGUI>
            ;
        )
        ZMK_MACRO(winchoose,
            wait-ms = <50>;
            tap-ms = <20>;
            bindings  = <&macro_press &kp LGUI>
                      , <&macro_tap &kp TAB>
                      , <&macro_tap &kp TAB>
                      , <&macro_pause_for_release>
                      , <&macro_release &kp LGUI>
            ;
        )
    };

    keymap {
        compatible = "zmk,keymap";
        #include "layers/magic_sturdy.dtsi"
        #include "layers/hands_down_ie_th.dtsi"
        #include "layers/symbols.dtsi"    
        #include "layers/numword.dtsi"
        #include "layers/navigation.dtsi"
    
        magic_layer {
            bindings = <
            &bt BT_CLR        &none               &none           &none           &none                                                                                                           &none      &none      &none      &none      &none
            &none             &none               &none           &none           &none           &none                                                                                &none      &none      &none      &none      &none      &none
            &none             &rgb_ug RGB_SPI     &rgb_ug RGB_SAI &rgb_ug RGB_HUI &rgb_ug RGB_BRI &rgb_ug RGB_TOG                                                                      &none      &none      &none      &none      &none      &none
            &bootloader       &rgb_ug RGB_SPD     &rgb_ug RGB_SAD &rgb_ug RGB_HUD &rgb_ug RGB_BRD &rgb_ug RGB_EFF                                                                      &none      &none      &none      &none      &none      &bootloader
            &sys_reset        &none               &none           &none           &none           &none           &bt_2     &bt_3     &none            &none     &none     &none       &none      &none      &none      &none      &none      &sys_reset
            &none             &none               &none           &none           &none                           &bt_0     &bt_1     &out OUT_USB     &none     &none     &none                  &none      &none      &none      &none      &none
            >;
        };
    };
};
